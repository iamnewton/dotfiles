[alias]
	# https://git.wiki.kernel.org/articles/a/l/i/Aliases.html

	# add via the patch
	ad = add --patch

	# Sets git branch default to list verbosely
	br = branch --list --verbose

	# Fetch a repository ($1) and checkout its ref ($2) HEAD
	# Use: `git browse https://github.com/necolas/dotfiles <commit-ish>`
	browse = !bash -c 'git fetch $1 ${2:-HEAD} && git checkout FETCH_HEAD' -

	# remove untracked files and directories from the working tree, clear the stash
	cleanup = !git clean -df && git stash clear

	# sign all commits
	co = commit --gpg-sign

	# add sign-off for commits by default
	commit = commit -s

	create-branch = !bash -c 'git push origin head:refs/heads/$1 && git fetch origin && git branch --track $1 origin/$1 && cd . && git checkout $1' -

	# @TODO: figure out how this works
	ctags = !bash -c 'test -f .git/hooks/ctags || git init && .git/hooks/ctags git-ctags' -

	delete-branch = !bash -c 'git push origin :refs/heads/$1 && git branch -d $1' -

	# Diff with a Preview pane using FZF
	dif = !bash -c $(git diff --name-only | fzf -m --ansi --preview 'git diff $@ --color=always -- {-1}') -

	# Diff what is staged for the next commit
	difc = diff --staged

	# Show last change for a file (https://t.co/Ks4AAKIZxY)
	# usage: git lastchange <file>
	lastchange = log -p --follow -n 1

	# View your latest used git branches
	latest = for-each-ref --count=30 --sort=-committerdate refs/heads/ --format='%(refname:short)'

	# The shortlog gives us summaries of git log;
	# -s suppresses commit description and provide a commit count summary only
	# -n sorts output according to the number of commits per author instead of author alphabetic order.
	# --all flag logs all branches
	# --no-merges ensures that merge commits arenâ€™t being counted
	# Source: https://csswizardry.com/2017/05/little-things-i-like-to-do-with-git/
	leader = shortlog -sn --all --no-merges

	# Custom pretty log
	lo = log --pretty=nice --date-order --graph --all
	# old alias from the previous one; hoping to break the habit
	logp = log --pretty=nice --date-order --graph --all

	# Diffstat log
	logs = log --stat

	# Short format diffstat log
	logsf = log --stat --format=oneline --abbrev-commit

	merge-branch = !git checkout main && git merge @{-1}

	# Fetch and checkout a GitHub Pull Request from a remote (defaults to `origin`)
	# https://gist.github.com/gnarf/5406589
	# @TODO: better served as a bash function in the form of `git-pr`, thus allowing it
	# to be run as git pr 123
	# Use: `git pr 123` or `git pr 123 upstream`
	pr = !bash -c 'git fetch -fu ${2:-origin} refs/pull/$1/head:gh-pr/$1 && git checkout gh-pr/$1' -

	# Sets git remote default to list verbosely
	re = remote -v

	# remind me what was recently done
	# Source: https://twitter.com/csswizardry/status/784399286050156544
	recap = log --since="00:00:00" --oneline --no-merges --author=$GIT_COMMITTER_EMAIL

	# adds all changes including untracked files and creates a commit
	# run `git undo` when coming back
	save = !git add -A && git commit -m 'SAVEPOINT'

	# sets up a quick git server
	# touch .git/git-daemon-export-ok
	# $ git serve
	serve = daemon --reuseaddr --verbose  --base-path=. --export-all ./.git

	# Stash and force a save with a description
	stas = !bash -c 'test -n $1 && git stash push -m $1'

	# `git remote prune origin`: remove remote-tracking branches that were deleted from the remote repo
	# `git cleanup` (alias): cleanup unnecessary files and optimize the local repository
	trim = !git remote prune origin && git cleanup

	undo = reset HEAD~1 --mixed

	# Show the diff of everything you haven't pushed yet
	unpushed = !"git diff origin/$(git rev-parse --abbrev-ref HEAD)..HEAD"

	# Find out who is currently active on the repository
	# Displays committers in descending order of number of commits
	who = shortlog --numbered --summary --email --no-merges --since='3 months'

	# https://haacked.com/archive/2014/07/28/github-flow-aliases/
	# commit everything in working directory, then hard reset to remove that commit
	# run the `git reflog` command and find the SHA of the commit to redo
	wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

	# word diff
	word = diff --word-diff

[apply]
	whitespace = nowarn

[branch]
	autosetupmerge = true
	# configure git to always add '--rebase' to git pull, to maintain nicer history
	# read more at http://gitready.com/advanced/2009/02/11/pull-with-rebase.html
	# you can override this with '--no-rebase' switch
	autosetuprebase = always
	# https://blog.gitbutler.com/how-git-core-devs-configure-git/#listing-branches
	# sort the list by the most recent commit date
	sort = -committerdate

[color]
	# color opts: normal, black, red, green, yellow, blue, magenta, cyan, or white
	ui = auto
	interactive = auto
	showbranch = auto

[color "branch"]
	current = magenta ul bold reverse
	local = magenta dim
	remote = blue
	upstream = blue dim
	plain = white

[color "diff"]
	meta = yellow bold
	frag = cyan bold
	old = red bold
	new = green bold
	whitespace = yellow reverse
	commit = green ul bold

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[color "status"]
	added = green
	changed = yellow
	untracked = red
	branch = magenta
	nobranch = red bold

[column]
	ui = auto

[commit]
	# put the diffs inside the commit message
	verbose = true
	# custom commit message template
	template = ~/.config/git/message
	# set up commit signing: https://help.github.com/articles/signing-commits-using-gpg/
	gpgsign = true

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.config/git/ignore
	attributesfile = ~/.config/git/attributes
	# http://git-scm.com/docs/gitattributes#_end_of_line_conversion
	# Other source code management systems normalize all text files in their
	# repositories, and there are two ways to enable similar automatic
	# normalization in Git.
	#
	# If you want to have CRLF line endings in your working directory
	# regardless of the repository you are working with, you can set the
	# config variable "core.autocrlf" without changing any attributes.
	#
	# This does not force normalization of all text files, but does ensure
	# that text files that you introduce to the repository have their line
	# endings normalized to LF when they are added, and that files that are
	# already normalized in the repository stay normalized.
	autocrlf = input
	# use vim as editor
	editor = vim
	# pager = !bash -lc '$(brew --prefix git)/share/git-core/contrib/diff-highlight/diff-highlight | strip-diff-leading-symbols | less -+$LESS -FRX' -
	pager = delta
	# http://git-scm.com/docs/gitattributes#_end_of_line_conversion
	# If core.safecrlf is set to "true" or "warn", Git verifies if the
	# conversion is reversible for the current setting of core.autocrlf.
	# For "true", Git rejects irreversible conversions; for "warn", Git only
	# prints a warning but accepts an irreversible conversion. The safety
	# triggers to prevent such a conversion done to the files in the work
	# tree, but there are a few exceptions. Even thoughâ€¦
	# dont irreversably perform CRLF conversion on a binary file
	safecrlf = true
	# Sindre Sorhus on Twitter said:  "ðŸ”¥ Get faster `git status` by upgrading
	# to git 2.8.0 and run `$ git config --system core.untrackedCache true`
	# https://t.co/eA70g9KJnH"
	# https://twitter.com/sindresorhus/status/715593327723343872
	untrackedCache = true
	hooksPath = ~/.config/git/hooks

[delta]
	hyperlinks = true
	# set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
	light = false
	line-numbers = true
	# use n and N to move between diff sections
	navigate = true
	side-by-side = true

[diff]
	# show code movement in different colors then added and removed lines
	colorMoved = plain
	# replace the a/ and b/ in your diff header output with where the diff is coming from, so i/ (index), w/ (working directory) or c/ commit
	mnemonicPrefix = true
	# detect if a file has been renamed
	renames = true
	tool = vimdiff

[diff "exif"]
	textconv = exiftool

[diff "spaceman-diff"]
	command = $(brew --prefix)/bin/spaceman-diff

[difftool]
	prompt = false

[difftool "bat"]
	cmd = bat --file-width $(tput cols) --style plain --color always \"$LOCAL\" \"$REMOTE\"

[fetch]
	# https://blog.gitbutler.com/how-git-core-devs-configure-git/#better-fetching
	prune = true
	pruneTags = true
	all = true

[help]
	# suggests commands for spelling mistakes
	autocorrect = 1

[init]
	defaultBranch = main
	templatedir = ~/.config/git/templates

[include]
	path = ~/.gitconfig.local

[includeIf "gitdir:/Users"]
	path = ~/.config/git/darwin

[includeIf "gitdir:/home"]
	path = ~/.config/git/linux

[interactive]
	diffFilter = delta --color-only --features=interactive

[merge]
	conflictstyle = zdiff3
	# Include summaries of merged conflicts in newly created merge commit messages
	log = true
	tool = vimdiff
	summary = true

[pretty]
	# tut: http://gitimmersion.com/lab_10.html
	# ref: http://linux.die.net/man/1/git-log
	# Result: <short-sha> <commit-message> (<pointer-names>) -- <commit-author-name>; <relative-time>
	# http://git-scm.com/book/en/Git-Basics-Viewing-the-Commit-History
	# %b:+--body
	# %Cred:switch color to red
	# %Cgreen: switch color to green
	# %Cblue: switch color to blue
	# %Creset: reset color
	# %C(...): color specification, as described in color.branch.* config option
	# %d+---ref names, like the --decorate option of git-log(1)
	# %H+---Commit hash
	# %h+---Abbreviated commit hash
	# %f:+--sanitized subject line, suitable for a filename
	# %m:+--left, right or boundary mark
	# %N:+--commit notes
	# %n:+--newline
	# %P+---Parent hashes
	# %p+---Abbreviated parent hashes
	# %s+---Subject
	# %T+---Tree hash
	# %t+---Abbreviated tree hash
	# %w([<w>[,<i1>[,<i2>]]]): switch line wrapping, like the -w option of git-shortlog(1).
	# %an+--Author name
	# %ae+--Author e-mail
	# %ad+--Author date (format respects the --date= option)
	# %ar+--Author date, relative
	# %cn+--Committer name
	# %ce+--Committer email
	# %cd+--Committer date
	# %cr+--Committer date, relative
	# %%+---:a raw %
	# %x00:+print a byte from a hex code
	nice = "%C(209)%an%C(reset)@%C(yellow)%h%C(reset) said '%C(white bold)%s%C(reset)' about %C(cyan)%ar%C(reset)%C(magenta)%d%C(reset)"

[pull]
	rebase = true

[push]
	# if the branch does not exist and there is no tracking branch setup, it will create one
	autoSetupRemote = true
	default = matching
	# https://github.com/git/git/commit/a8bc269f11b34e60f5fdbd8e831a654dd6b6b67e
	# push annotated tags that are missing to remote
	followTags = true

[rebase]
	autoSquash = true
	autoStash = true
	updateRefs = true

# http://git-scm.com/blog/2010/03/08/rerere.html
# reuse the recorded resolutions
[rerere]
	enabled = true
	autoupdate = true

[status]
	# always show the full path
	relativePaths = false

#!/usr/bin/env bash

# Example:
# newton@macbook-pro in ~/.dotfiles on main [+!?$] at 23:20:26
# $

# Screenshot: http://iamnewton.github.io/cdn/images/dotfiles-screenshot-v2.png
# iTerm2 prefs: import Base16 Eighties theme (disable bright colors for bold text)
# Color ref: http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
# More tips: http://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html

create_fill() {
	# Fill with minuses
	# (this is recalculated every time the prompt is shown in function prompt_command):
	local fill="--- "

	# create a $fill of all screen width minus the time string and a space:
	let fillsize=${COLUMNS}-10
	fill=""
	while [ "$fillsize" -gt "0" ]
		do
			fill="-${fill}" # fill with underscores to work on
			let fillsize=${fillsize}-1
	done
	printf "%s (%s)\n" "$fill" "$(date +%H:%M)"
}

prompt_git() {
	local s
	local branchName
	local bold=$(tput bold)
	local reset=$(tput sgr0)
	local base05=$(tput setaf 7) # ++
	local base08=$(tput setaf 1) # red
	local base09=$(tput setaf 209) # orange
	local base0A=$(tput setaf 3) # yellow
	local base0B=$(tput setaf 2) # green
	local base0F=$(tput setaf 173) # brown
	local branchStyle="$base0B"

	# check if the current directory is in a git repository
	if [ "$(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" "$?")" == 0 ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then

			# ensure index is up to date
			git update-index --really-refresh  -q &>/dev/null

			# check for stashed files
			if git rev-parse --verify refs/stash &>/dev/null; then
				s="$s\$";
				branchStyle="$base0F"
			fi

			# check for uncommitted changes in the index
			if ! git diff --quiet --ignore-submodules --cached; then
				s="$s+";
				branchStyle="$base0A"
			fi

			# check for unstaged changes
			if ! git diff-files --quiet --ignore-submodules --; then
				s="$s!";
				branchStyle="$base09"
			fi

			# check for untracked files
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s="$s?";
				branchStyle="$base08"
			fi
		fi

		# get the short symbolic ref
		# if HEAD isn't a symbolic ref, get the short SHA
		# otherwise, just give up
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || git rev-parse --short HEAD 2> /dev/null || printf "(unknown)")"

		[ -n "$s" ] && s=" [$s]"

		printf "%s" "$base05$bold on $branchStyle$branchName$s"
	else
		return
	fi
}

set_prompts() {
	local bold=""
	local reset=""

	local base00
	local base01
	local base02
	local base03
	local base04
	local base05
	local base06
	local base07
	local base08
	local base09
	local base0A
	local base0B
	local base0C
	local base0D
	local base0E
	local base0F

	local hostStyle
	local userStyle
	local fillStyle


	if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
		tput sgr0 # reset colors

		bold=$(tput bold)
		reset=$(tput sgr0)

		base00=$(tput setaf 16)  # ----
		base01=$(tput setaf 59)  # ---
		base02=$(tput setaf 59)  # --
		base03=$(tput setaf 101) # -
		base04=$(tput setaf 144) # +
		base05=$(tput setaf 7) # ++
		base06=$(tput setaf 188) # +++
		base07=$(tput setaf 231) # ++++
		base08=$(tput setaf 1) # red
		base09=$(tput setaf 209) # orange
		base0A=$(tput setaf 3) # yellow
		base0B=$(tput setaf 2) # green
		base0C=$(tput setaf 6)  # aqua
		base0D=$(tput setaf 4)  # blue
		base0E=$(tput setaf 5) # purple
		base0F=$(tput setaf 173) # brown
	else
		bold=""
		reset="\e[0m"

		base00="\e[1;30m"
		base01="\e[1;30m"
		base02="\e[1;30m"
		base03="\e[1;30m"
		base04="\e[1;37m"
		base05="\e[1;37m"
		base06="\e[1;37m"
		base07="\e[1;37m"
		base08="\e[1;31m"
		base09="\e[1;33m"
		base0A="\e[1;33m"
		base0B="\e[1;32m"
		base0C="\e[1;36m"
		base0D="\e[1;34m"
		base0E="\e[1;35m"
		base0F="\e[1;31m"
	fi

	# build the prompt

	# logged in as root
	if [[ "$USER" == "root" ]]; then
		userStyle="\[$bold$base08\]" # bold red
	else
		userStyle="\[$base0C\]" # orange
	fi

	# connected via ssh
	if [[ "$SSH_TTY" ]]; then
		hostStyle="\[$bold$base08\]" # bold red
	else
		hostStyle="\[$base0A\]" # yellow
	fi

	# set the terminal title to the current working directory
	PS1="\[\033]0;\w\007\]"

	PS1+="\n" # newline
	PS1+="\[$userStyle\]\u" # username
	PS1+="\[$reset$bold$base05\]@"
	PS1+="\[$hostStyle\]\H" # host including the .local
	PS1+="\[$reset$bold$base05\] in "
	PS1+="\[$base0E\]\$PWD\[$reset\]" # working directory
	PS1+="\$(prompt_git)" # git repository details
	PS1+="\[$reset$bold$base05\] at "
	PS1+="\[$base0D\]\t" # time stamp
	PS1+="\n"
	PS1+="\[$reset$base02\]#\!: "
	PS1+="\[$reset$base07\]\$ \[$reset\]" # $ (and reset color)

	export PS1
}

set_prompts
unset set_prompts

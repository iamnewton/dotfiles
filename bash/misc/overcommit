CommitMsg:
  ALL:
    requires_files: false
    quiet: false

  CapitalizedSubject:
    enabled: true
    description: 'Checking subject capitalization'

  EmptyMessage:
    enabled: true
    description: 'Checking for empty commit message'
    quiet: true

  GerritChangeId:
    enabled: false
    description: 'Ensuring Gerrit Change-Id is present'
    required: true

  HardTabs:
    enabled: false
    description: 'Checking for hard tabs'

  RussianNovel:
    enabled: true # default is false
    description: 'Checking length of commit message'
    quiet: true

  SingleLineSubject:
    enabled: true
    description: 'Checking subject line'

  SpellCheck:
    enabled: true
    description: 'Checking for misspelled words'
    required_executable: 'hunspell'
    flags: ['-a']

  TextWidth:
    enabled: true
    description: 'Checking text width'
    max_subject_width: 50
    max_body_width: 72

  TrailingPeriod:
    enabled: true
    description: 'Checking for trailing periods in subject'

# Hooks that are run after `git commit` is executed, before the commit message
# editor is displayed. These hooks are ideal for syntax checkers, linters, and
# other checks that you want to run before you allow a commit object to be
# created.
PreCommit:
  ALL:
    problem_on_unmodified_line: report
    requires_files: true
    required: false
    quiet: false
    exclude:
      - 'node_modules/**'
      - 'bower_components/**'
      - '.bowerrc'
      - '.editorconfig'
      - '.gitattributes'
      - '.gitignore'
      - '.jscs.json'
      - '.jshintrc'

  AuthorEmail:
    enabled: true
    description: 'Checking author email'
    requires_files: false
    required: true
    quiet: true
    pattern: '^[^@]+@.*$'

  AuthorName:
    enabled: true
    description: 'Checking for author name'
    requires_files: false
    required: true
    quiet: true

  BrokenSymlinks:
    enabled: true
    description: 'Checking for broken symlinks'
    quiet: true

  BundleCheck:
    enabled: true
    description: 'Checking Gemfile dependencies'
    required_executable: 'bundle'
    flags: ['check']
    install_command: 'gem install bundler'
    include:
      - 'Gemfile'
      - 'Gemfile.lock'
      - '*.gemspec'

  CaseConflicts:
    enabled: true
    description: 'Checking for case-insensitivity conflicts'
    quiet: true

  CssLint:
    enabled: true
    description: 'Analyzing with csslint'
    required_executable: 'csslint'
    flags: ['--quiet', '--format=compact']
    install_command: 'npm install -g csslint'
    include: '**/*.css'

  EsLint:
    enabled: true
    description: 'Analyzing with ESLint'
    required_executable: 'eslint'
    flags: ['--format=compact']
    install_command: 'npm install -g eslint'
    include: '**/*.js'

  HardTabs:
    enabled: false
    description: 'Checking for hard tabs'
    quiet: true
    required_executable: 'grep'
    flags: ['-IHn', "\t"]

  HtmlTidy:
    enabled: true
    description: 'Analyzing HTML with tidy'
    required_executable: 'tidy'
    flags: ['-errors', '-quiet', '-utf8']
    include: '**/*.html'

  ImageOptim:
    enabled: true
    description: 'Checking for optimizable images'
    required_executable: 'image_optim'
    install_command: 'gem install image_optim'
    flags: ['-no-pngout']
    include:
      - '**/*.gif'
      - '**/*.jpeg'
      - '**/*.jpg'
      - '**/*.png'
      - '**/*.svg'

  JavaCheckstyle:
    enabled: true
    description: 'Analyzing with checkstyle'
    required_executable: 'checkstyle'
    flags: ['-c', '/sun_checks.xml']
    include: '**/*.java'

  Jscs:
    enabled: true
    description: 'Analyzing with JSCS'
    required_executable: 'jscs'
    flags: ['--reporter=inline', '--verbose']
    install_command: 'npm install -g jscs'
    include: '**/*.js'

  JsHint:
    enabled: true
    description: 'Analyzing with JSHint'
    required_executable: 'jshint'
    flags: ['--verbose']
    install_command: 'npm install -g jshint'
    include: '**/*.js'

  JsLint:
    enabled: true
    description: 'Analyzing with JSLint'
    required_executable: 'jslint'
    flags: ['--terse']
    install_command: 'npm install -g jslint'
    include: '**/*.js'

  Jsl:
    enabled: false
    description: 'Analyzing with JSL'
    required_executable: 'jsl'
    flags: ['-nologo', '-nofilelisting', '-nocontext', '-nosummary']
    include: '**/*.js'

  JsonSyntax:
    enabled: true
    description: 'Validating JSON syntax'
    required_library: 'json'
    install_command: 'gem install json'
    include: '**/*.json'

  LocalPathsInGemfile:
    enabled: true
    description: 'Checking for local paths in Gemfile'
    required_executable: 'grep'
    flags: ['-IHnE', "^[^#]*((\\bpath:)|(:path[ \t]*=>))"]
    include: '**/Gemfile'

  MergeConflicts:
    enabled: true
    description: 'Checking for merge conflicts'
    quiet: true
    required_executable: 'grep'
    flags: ['-IHn', "^<<<<<<<[ \t]"]


  ScssLint:
    enabled: true
    description: 'Analyzing with scss-lint'
    required_executable: 'scss-lint'
    install_command: 'gem install scss-lint'
    include: '**/*.scss'

  ShellCheck:
    enabled: true
    description: 'Analyzing with ShellCheck'
    required_executable: 'shellcheck'
    flags: ['--format=gcc']
    include: '**/*.sh'

  TrailingWhitespace:
    enabled: true
    description: 'Checking for trailing whitespace'
    required_executable: 'grep'
    flags: ['-IHn', "[ \t]$"]

  TravisLint:
    enabled: true
    description: 'Checking Travis CI configuration'
    required_executable: 'travis'
    flags: ['lint']
    install_command: 'gem install travis'
    include: '.travis.yml'

  W3cCss:
    enabled: true
    description: 'Analyzing with W3C CSS validation service'
    required_library: 'w3c_validators'
    install_command: 'gem install w3c_validators'
    validator_uri: 'http://jigsaw.w3.org/css-validator/validator'
    language: 'en'
    profile: 'css3'
    warn_level: 2
    include:
      - '**/*.css'

  W3cHtml:
    enabled: true
    description: 'Analyzing with W3C HTML validation service'
    required_library: 'w3c_validators'
    install_command: 'gem install w3c_validators'
    validator_uri: 'http://validator.w3.org/check'
    charset: 'utf-8'
    doctype: 'HTML5'
    include:
      - '**/*.html'

  YamlSyntax:
    enabled: true
    description: 'Checking YAML syntax'
    required_library: 'yaml'
    include:
      - '**/*.yaml'
      - '**/*.yml'

# Hooks that run after HEAD changes or a file is explicitly checked out.
PostCheckout:
  ALL:
    required: false
    quiet: false

  IndexTags:
    enabled: true
    description: 'Generating tags file from source'
    quiet: true
    required_executable: 'ctags'

  SubmoduleStatus:
    enabled: true
    description: 'Checking submodule status'
    quiet: true
    recursive: false

# Hooks that run after a commit is created.
PostCommit:
  ALL:
    requires_files: false
    required: false
    quiet: false

  GitGuilt:
    enabled: true
    description: 'Calculating changes in blame since last commit'
    requires_files: true
    required_executable: 'git-guilt'
    flags: ['HEAD~', 'HEAD']
    install_command: 'npm install -g git-guilt'

  IndexTags:
    enabled: true
    description: 'Generating tags file from source'
    quiet: true
    required_executable: 'ctags'

  SubmoduleStatus:
    enabled: true
    description: 'Checking submodule status'
    quiet: true
    recursive: false

# Hooks that run after `git merge` executes successfully (no merge conflicts).
PostMerge:
  ALL:
    requires_files: false
    quiet: false

  IndexTags:
    enabled: true
    description: 'Generating tags file from source'
    quiet: true
    required_executable: 'ctags'

  SubmoduleStatus:
    enabled: true
    description: 'Checking submodule status'
    quiet: true
    recursive: false

# Hooks that run after a commit is modified by an amend or rebase.
PostRewrite:
  ALL:
    requires_files: false
    quiet: false

  IndexTags:
    enabled: true
    description: 'Generating tags file from source'
    quiet: true
    required_executable: 'ctags'

  SubmoduleStatus:
    enabled: true
    description: 'Checking submodule status'
    quiet: true
    recursive: false

# Hooks that run during `git push`, after remote refs have been updated but
# before any objects have been transferred.
PrePush:
  ALL:
    requires_files: false
    required: false
    quiet: false

  ProtectedBranches:
    enabled: true
    description: 'Checking for illegal pushes to protected branches'
    branches: ['master']

  RSpec:
    enabled: false
    description: 'Running RSpec test suite'
    required_executable: 'rspec'

# Hooks that run during `git rebase`, before any commits are rebased.
# If a hook fails, the rebase is aborted.
PreRebase:
  ALL:
    requires_files: false
    required: false
    quiet: false

  MergedCommits:
    enabled: true
    description: 'Checking for commits that have already been merged'
    branches: ['master']
